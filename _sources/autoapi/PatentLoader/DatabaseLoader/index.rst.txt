PatentLoader.DatabaseLoader
===========================

.. py:module:: PatentLoader.DatabaseLoader


Attributes
----------

.. autoapisummary::

   PatentLoader.DatabaseLoader.a


Classes
-------

.. autoapisummary::

   PatentLoader.DatabaseLoader.DatabaseLoader


Module Contents
---------------

.. py:class:: DatabaseLoader

   Class for loading patent data and linking it to companies in the database.

   Methods:
   - __init__: Initialize database connection parameters and helper objects.
   - fetch_holder_entities: Fetch company data from the database with offset and limit.
   - fetch_holder_entities_in_chunks: Fetch company data from the database in chunks.
   - insert_patent_model_holder: Insert patent holder data into the database.
   - process_company: Process company data and link it to patents.
   - load_company: Run the process of loading and linking company and patent data.
   - fetch_patent_models: Fetch patent data from the database by patent type.
   - fetch_and_convert_to_df: Convert patent data to a DataFrame.
   - load_patent_model: Load patent data and start its processing.


   .. py:method:: fetch_holder_entities(offset: int, limit: int)
      :async:


      Fetches company data from the database with offset and limit.

      Parameters:
      offset (int): Offset for data selection.
      limit (int): Limit for data selection.

      Returns:
      list: Records from the database.



   .. py:method:: fetch_holder_entities_in_chunks(chunk_size: int)
      :async:


      Fetches company data from the database in chunks.

      Parameters:
      chunk_size (int): Size of each chunk for data selection.

      Returns:
      generator: Generator yielding DataFrame with company data.



   .. py:method:: insert_patent_model(conn, df: pandas.DataFrame, patent_type: str)
      :async:


      Inserts patent holder data into the database.

      Parameters:
      conn (asyncpg.Connection): Database connection.
      df (pd.DataFrame): DataFrame with data to insert.
      patent_type (str): Type of patent (model, design, invention).

      Returns:
      None



   .. py:method:: insert_patents(df: pandas.DataFrame, patent_type: str)
      :async:



   .. py:method:: insert_patent_model_holder(conn, df: pandas.DataFrame, patent_type: str)
      :async:


      Inserts patent holder data into the database.

      Parameters:
      conn (asyncpg.Connection): Database connection.
      df (pd.DataFrame): DataFrame with data to insert.
      patent_type (str): Type of patent (model, design, invention).

      Returns:
      None



   .. py:method:: process_company(patent_type: str)
      :async:


      Processes company data and links it to patents.

      Parameters:
      patent_type (str): Type of patent (model, design, invention).

      Returns:
      None



   .. py:method:: load_company(patent_type='model')

      Runs the process of loading and linking company and patent data.

      Parameters:
      patent_type (str): Type of patent (model, design, invention).

      Returns:
      None



   .. py:method:: fetch_patent_models(patent_type: str)
      :async:


      Fetches patent data from the database by patent type.

      Parameters:
      patent_type (str): Type of patent (model, design, invention).

      Returns:
      list: Records from the database.



   .. py:method:: fetch_and_convert_to_df(patent_type: str) -> pandas.DataFrame
      :async:


      Converts patent data to a DataFrame.

      Parameters:
      patent_type (str): Type of patent (model, design, invention).

      Returns:
      pd.DataFrame: DataFrame with patent data.



   .. py:method:: load_patent_model(patent_type='model')

      Loads patent data and starts its processing.

      Parameters:
      patent_type (str): Type of patent (model, design, invention).

      Returns:
      None



.. py:data:: a

